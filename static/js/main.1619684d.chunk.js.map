{"version":3,"sources":["components/Home.js","components/interests/Category.js","components/interests/Interests.js","components/Projects.js","components/Contact.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Category","props","title","Interests","Projects","href","target","rel","Contact","Banner","App","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uYAYeA,MATf,WACI,OACI,6BAASC,UAAU,QACf,+DACA,sG,MCIGC,MARf,SAAkBC,GACd,OACI,yBAAKF,UAAU,YACX,4BAAME,EAAMC,S,MCSTC,MAXf,WACI,OACI,6BAASJ,UAAU,aACf,kBAAC,EAAD,CAAUG,MAAM,gBAChB,kBAAC,EAAD,CAAUA,MAAM,WAChB,kBAAC,EAAD,CAAUA,MAAM,UAChB,kBAAC,EAAD,CAAUA,MAAM,mC,MCUbE,MAjBf,WACI,OACI,6BAASL,UAAU,YACf,uEACA,iCACI,uBAAGM,KAAK,yDAAyDC,OAAO,SAASC,IAAI,uBAArF,kBACA,6KAEJ,6BACA,iCACI,uBAAGF,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBAA/D,mBACA,iM,MCHDC,MARf,WACI,OACI,6BAAST,UAAU,WACf,2CADJ,0B,MCIOU,MANf,WACI,OACI,yBAAKV,UAAU,Y,MC4CRW,MAnCf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,4BAAQA,UAAU,cAChB,4CACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMY,GAAG,KAAT,QADF,MAEE,kBAAC,IAAD,CAAMA,GAAG,cAAT,aAFF,MAGE,kBAAC,IAAD,CAAMA,GAAG,aAAT,YAHF,MAIE,kBAAC,IAAD,CAAMA,GAAG,YAAT,aAGJ,6BAASZ,UAAU,YACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,cACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YC5BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1619684d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Home.scss'\r\n\r\nfunction Home() {\r\n    return (\r\n        <section className=\"home\">\r\n            <h1>Welcome to my personal website!</h1>\r\n            <p>I'm using this space for webdev practice and a sort of personal blog.</p>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../../styles/Category.scss';\r\n\r\nfunction Category(props) {\r\n    return (\r\n        <div className=\"category\">\r\n            <h1>{ props.title }</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Category;","import React from 'react';\r\nimport Category from './Category';\r\nimport '../../styles/Interests.scss';\r\n\r\nfunction Interests() {\r\n    return (\r\n        <section className=\"interests\">\r\n            <Category title=\"Video Games\" />\r\n            <Category title=\"Coffee\" />\r\n            <Category title=\"Music\" />\r\n            <Category title=\"Snowboarding / Skateboarding\" />\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Interests;","import React from 'react';\r\nimport '../styles/Projects.scss'\r\n\r\nfunction Projects() {\r\n    return (\r\n        <section className=\"projects\">\r\n            <h1>Shameless plugs for friends and family:</h1>\r\n            <article>\r\n                <a href=\"https://open.spotify.com/artist/6JG7KTQYlmrrMg5an1WjFD\" target=\"_blank\" rel=\"noopener noreferrer\">Saint Sterling</a>\r\n                <p>A few of my friends decided to make a band and it's pretty great. Check out their first EP on Spotify and give them a follow on social media!</p>\r\n            </article>\r\n            <hr></hr>\r\n            <article>\r\n                <a href=\"https://sisyphean-games.itch.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Sisyphean Games</a>\r\n                <p>I had the opportunity to participate in a game jam with a couple of my cousins. Here is their game company page. Check out what they've been working on lately!</p>\r\n            </article>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\nimport '../styles/Contact.scss'\r\n\r\nfunction Contact() {\r\n    return (\r\n        <section className=\"contact\">\r\n            <strong>Email: </strong>bren.ryan94@gmail.com\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport '../styles/Banner.scss';\r\n\r\nfunction Banner() {\r\n    return (\r\n        <div className=\"banner\"></div>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Home from './components/Home';\nimport Interests from './components/interests/Interests';\nimport Projects from './components/Projects';\nimport Contact from './components/Contact';\nimport Banner from './components/Banner';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Router>\n        <header className=\"App-header\">\n          <h1>Brendan Ryan</h1>\n          <nav className=\"App-nav\">\n            <Link to=\"/\">Home</Link>{ ` | ` }\n            <Link to=\"/interests\">Interests</Link>{ ` | ` }\n            <Link to=\"/projects\">Projects</Link>{ ` | ` }\n            <Link to=\"/contact\">Contact</Link>\n          </nav>\n        </header>\n        <section className=\"App-body\">\n          <Switch>\n            <Route path=\"/interests\">\n              <Interests />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects />\n            </Route>\n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </section>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}